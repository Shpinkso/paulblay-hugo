name: Build & Publish (Preview)

on:
  push:
    branches: ['**']
  pull_request:
    branches: [ 'main' ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  preview:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: '0.123.7'
          extended: true

      - name: Compute preview path slug
        id: slug
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "val=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          else
            echo "val=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Build (Preview)
        run: |
          hugo --panicOnWarning --minify --environment preview \
               --baseURL "https://shpinkso.github.io/${{ github.event.repository.name }}/previews/${{ steps.slug.outputs.val }}/"

      - name: Publish to gh-pages (keep other previews)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./public
          destination_dir: previews/${{ steps.slug.outputs.val }}
          keep_files: true
          commit_message: "Preview ${{ steps.slug.outputs.val }} @ ${{ github.sha }}"


      - name: Wait for GitHub Pages deployment
        uses: actions/github-script@v7
        env:
          PUBLISH_STARTED: ${{ steps.publish_started.outputs.timestamp }}
        with:
          script: |
            const startedAt = Date.parse(process.env.PUBLISH_STARTED || '');
            if (Number.isNaN(startedAt)) {
              core.setFailed(`Invalid publish start timestamp: "${process.env.PUBLISH_STARTED}"`);
              return;
            }

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const timeoutMs = 10 * 60 * 1000; // 10 minutes
            const delayMs = 10 * 1000;

            const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
            const deadline = Date.now() + timeoutMs;

            while (Date.now() < deadline) {
              const { data } = await github.rest.repos.listPagesBuilds({ owner, repo, per_page: 1 });

              if (!data.length) {
                core.info('No GitHub Pages builds found yet. Waiting...');
                await sleep(delayMs);
                continue;
              }

              const [latest] = data;
              const updatedAt = Date.parse(latest.updated_at || latest.created_at);
              core.info(`Latest Pages build #${latest.id} status: ${latest.status}, updated at: ${latest.updated_at}`);

              if (updatedAt < startedAt) {
                await sleep(delayMs);
                continue;
              }

              if (latest.status === 'built') {
                const commitSha = typeof latest.commit === 'object' ? latest.commit?.sha : latest.commit;
                core.info(`GitHub Pages deployment for commit ${commitSha || 'unknown commit'} completed.`);
                return;
              }

              if (latest.status === 'errored') {
                const message = latest.error?.message || 'unknown error';
                core.setFailed(`GitHub Pages deployment failed: ${message}`);
                return;
              }

              await sleep(delayMs);
            }

            core.setFailed('Timed out waiting for GitHub Pages to publish the preview.');

      - name: Verify published preview links
        uses: lycheeverse/lychee-action@v1
        with:
          fail: 'true'
          args: >-
            --no-progress
            --retry-wait-time 5
            --max-retries 6
            --max-concurrency 20
            --accept 200..299,403
            --exclude "https://bootstrapious.com/universal-business-e-commerce-template"
            https://shpinkso.github.io/${{ github.event.repository.name }}/previews/${{ steps.slug.outputs.val }}/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Paul Blay</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content in Blog on Paul Blay</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 07 Oct 2025 08:52:20 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Policy for AI-enhanced software development</title>
      <link>http://localhost:1313/blog/2025/10/07/ai_in_software_development/</link>
      <pubDate>Tue, 07 Oct 2025 08:52:20 +0100</pubDate>
      <guid>http://localhost:1313/blog/2025/10/07/ai_in_software_development/</guid>
      <description>&lt;p&gt;The DORA research group at Google recently came out with an &lt;a href=&#34;https://cloud.google.com/blog/products/ai-machine-learning/introducing-doras-inaugural-ai-capabilities-model&#34;&gt;AI capabilities model&lt;/a&gt; and capability number 1 is to have a &amp;ldquo;Clear and communicated AI stance&amp;rdquo;.&#xA;Given my experience so far talking to other leaders and on the ground, here&amp;rsquo;s my proposal for what an effective AI stance could look like:&lt;/p&gt;&#xA;&lt;h2 id=&#34;core-philosophy&#34;&gt;Core Philosophy&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;LLMs should amplify engineering cognition, not automate it&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Human Ownership&lt;/strong&gt;: Engineers must remain the authors and owners of production logic.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Knowledge Retention&lt;/strong&gt;: We preserve and grow organisational understanding rather than outsource it.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cognitive Augmentation&lt;/strong&gt;: Use LLMs to compress the time between &lt;em&gt;problem recognition&lt;/em&gt; and &lt;em&gt;informed decision making&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;effective-augmentation-patterns&#34;&gt;Effective Augmentation Patterns&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-knowledge-synthesis--search&#34;&gt;1. Knowledge Synthesis &amp;amp; Search&lt;/h3&gt;&#xA;&lt;p&gt;Turning documentation into an accessible, converstaional knowledge layer.&#xA;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing the OKR ScoreCard</title>
      <link>http://localhost:1313/blog/2021/04/05/the-okr-scorecard/</link>
      <pubDate>Mon, 05 Apr 2021 11:46:20 +0100</pubDate>
      <guid>http://localhost:1313/blog/2021/04/05/the-okr-scorecard/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/paulblay-hugo/img/OKR_Scorecard/OKRs_why-1024x227-1.png&#34; alt=&#34;OKRs_why&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;So let’s assume we’re using OKRs now. We’ve come up with some Objectives and tried to find meaningful measures for our Key Results that we think will help us ensure we’re going in the right direction.&lt;/p&gt;&#xA;&lt;p&gt;It’s important to remind ourselves that OKRs are just a tool. Using an ORK framework doesn’t necessarily ensure that we’re getting any tangible benefits over any other approach.&lt;/p&gt;&#xA;&lt;p&gt;For example, the next two OKR examples for our imaginary TownTalk ™ product both provide an objective and measurable KRs against it, but do both really unlock the same value?&lt;/p&gt;</description>
    </item>
    <item>
      <title>The agility Challenge for Embedded Software</title>
      <link>http://localhost:1313/blog/2020/12/02/the-agility-challenge-for-embedded-software/</link>
      <pubDate>Wed, 02 Dec 2020 11:46:20 +0100</pubDate>
      <guid>http://localhost:1313/blog/2020/12/02/the-agility-challenge-for-embedded-software/</guid>
      <description>&lt;p&gt;If you’ve ever worked for a business that has it’s core focus in the embedded software space, I suspect you are more likely to have had to tolerate software development practices from 20 years ago. If you’ve read many books on Agile software development, DevOps or other modern practices, you may also have noticed that they almost all talk about software that targets a server or website, possibly a PC. But unless you’re reading a very different library to me, you’ll not have seen much talk about embedded software. Why is this?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Focus on outcomes with OKRs</title>
      <link>http://localhost:1313/blog/2020/11/17/focus-on-outcomes-with-okrs/</link>
      <pubDate>Tue, 17 Nov 2020 11:46:20 +0100</pubDate>
      <guid>http://localhost:1313/blog/2020/11/17/focus-on-outcomes-with-okrs/</guid>
      <description>&lt;p&gt;If you’re interested in a way to tap into your team or companies creative potential, generating alignment and delivering tangible value, then OKRs should be your first port of call.&lt;/p&gt;&#xA;&lt;p&gt;I was fortunate enough to have met, and worked closely with &lt;a href=&#34;http://raganmcgill.co.uk/&#34;&gt;Ragan McGill&lt;/a&gt; while I was at DisplayLink. Ragan had experienced both effective and underwhelming use of OKRs in his career and gave a set of training on how to ensure that they are well formed and deliver on their potential.&lt;/p&gt;</description>
    </item>
    <item>
      <title>7 Practical Steps To Increase Accountability In Agile Teams</title>
      <link>http://localhost:1313/blog/2020/08/17/accountability-in-agile-teams/</link>
      <pubDate>Mon, 17 Aug 2020 11:46:20 +0100</pubDate>
      <guid>http://localhost:1313/blog/2020/08/17/accountability-in-agile-teams/</guid>
      <description>&lt;p&gt;&lt;em&gt;Individual and team accountability is critical for any high functioning team, I believe that this is often a concern for senior management, especially when considering an agile transformation, and can be difficult to attain.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;At the points in my career that I have seen senior management push back on the adoption of agile methodologies, the main areas of contention has been around the feeling of losing “control” over the delivery roadmap.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Complexity as a Software metric</title>
      <link>http://localhost:1313/blog/2020/07/20/complexity_as_sw_metric/</link>
      <pubDate>Mon, 20 Jul 2020 11:46:20 +0100</pubDate>
      <guid>http://localhost:1313/blog/2020/07/20/complexity_as_sw_metric/</guid>
      <description>&lt;p&gt;I’ve never been completely sold on Cyclomatic Complexity as a metric, it maps to linearly independent paths through code which may be useful to get an indication on the level of testing an application needs, assuming code coverage is not available (another metric that needs to be treated with caution), but how much value is that? Most applications are multi threaded and do not run in a linear fashion, I’d argue that there’s considerably more value in measuring the readability of code in order to allow people to understand what it does and how to change it. I’ve seen easy-to-read and hard-to-read methods that evaluate to the same value on the Cyclomatic Complexity scale. Perhaps that’s ok and we care about logical complexity, but my (weakly held) strong opinion is that the real value is in ease of human understanding when it comes to code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The ugly side of no surprises management</title>
      <link>http://localhost:1313/blog/2019/01/05/ugly_side_no_surprises/</link>
      <pubDate>Sat, 05 Jan 2019 11:46:20 +0100</pubDate>
      <guid>http://localhost:1313/blog/2019/01/05/ugly_side_no_surprises/</guid>
      <description>&lt;p&gt;I get it… I think…&lt;/p&gt;&#xA;&lt;p&gt;“No Surprises” management is intended to ensure that people aren’t hiding bad news from their colleagues (let’s face it, usually their boss or some other superior) so that we’re not horribly surprised at the last minute that, for example, our project is 6 months late.&lt;/p&gt;&#xA;&lt;p&gt;Boom! Instant high-functioning team! Everyone feels safe and surprises never happen…. Or at least, god help you if they still do happen, because I was very clear that I don’t like surprises! What don’t you understand? There isn’t an article on the whole internet that disagrees… Welcome to success-ville.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Autonomous teams vs &#39;resource&#39; management</title>
      <link>http://localhost:1313/blog/2018/10/10/autonomous_vs_resource/</link>
      <pubDate>Wed, 10 Oct 2018 11:46:20 +0100</pubDate>
      <guid>http://localhost:1313/blog/2018/10/10/autonomous_vs_resource/</guid>
      <description>&lt;p&gt;How often have you heard the phrase “We don’t have the resource” or “How many resources will it take?”&lt;/p&gt;&#xA;&lt;p&gt;Quite apart from the dehumanising nature of the word “resource” (should we, in response, say “that’s a good question, management resource number 3”?), people are not automatons who are all equally skilled/motivated coding machines that can be assumed to be equally effective in all scenarios.&lt;/p&gt;&#xA;&lt;p&gt;People each have unique skills, ways of working, areas of experience, interests and relationships with others that all matter heavily in terms of getting the best results, or getting anything at all.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why the bottleneck is everything</title>
      <link>http://localhost:1313/blog/2018/09/12/why_bottleneck_everything/</link>
      <pubDate>Wed, 12 Sep 2018 11:46:20 +0100</pubDate>
      <guid>http://localhost:1313/blog/2018/09/12/why_bottleneck_everything/</guid>
      <description>&lt;p&gt;This is probably the least intuitive idea that I’ve come across in my working career, but when explained and demonstrated, possibly one of the most important.&#xA;Here it is: it is inefficient to have everyone working at 100% effort, 100% of the time.&#xA;This seems wrong – we’re paying for these people, they should be putting all their time and effort towards our product features! Get back to working on them! However, due to a concept called the “theory of constraints” (see “The Goal” by E.M. Goldratt) this is actually a terribly inefficient way of getting value through your business.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Motivation 2.0</title>
      <link>http://localhost:1313/blog/2018/07/09/motivation_2/</link>
      <pubDate>Mon, 09 Jul 2018 11:46:20 +0100</pubDate>
      <guid>http://localhost:1313/blog/2018/07/09/motivation_2/</guid>
      <description>&lt;p&gt;How are you engaging your team? Are you running a regular appraisal cycle where everyone’s individual score is totted up and ultimately dictates financial reward (pay increase, bonus, share options) or, on the other side of the scale, performance improvement plans?&lt;/p&gt;&#xA;&lt;p&gt;How are you finding this?&lt;/p&gt;&#xA;&lt;p&gt;Do people who get the financial rewards become more engaged and effective throughout the year? Do those on the performance improvement plans “pull their socks up” and become superstars now that they know they’re not performing to expectations?&lt;/p&gt;</description>
    </item>
    <item>
      <title>what is agility?</title>
      <link>http://localhost:1313/blog/2017/02/03/what_is_agility/</link>
      <pubDate>Fri, 03 Feb 2017 11:46:20 +0100</pubDate>
      <guid>http://localhost:1313/blog/2017/02/03/what_is_agility/</guid>
      <description>&lt;p&gt;Strictly speaking, ‘agile’ is an adjective, a descriptive word… like “nimble” &amp;amp; so the more obvious title “What is agile?” probably would have made a small, hardcore, fraction of people up-chuck a little in their mouths. (I am not so offended on this one, but tell me something is “addicting” and I will develop an unruly lower eyelid twitch). I think the reason behind this is due to how commercialised and corporate the term has become over the years – ironically, as the original manifesto moved thinking in a completely different direction.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
